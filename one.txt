CodeIgniter is an Application Development Framework - a toolkit - for people who build web sites using PHP.
 Its goal is to enable you to develop projects much faster than you could if you were writing code from scratch,
  by providing a rich set of libraries for commonly needed tasks, as well as a simple interface and logical structure to access these libraries.
   CodeIgniter lets you creatively focus on your project by minimizing the amount of code needed for a given task.


Who is CodeIgniter For?
CodeIgniter is right for you if:

You want a framework with a small footprint.
You need exceptional performance.
You need broad compatibility with standard hosting accounts that run a variety of PHP versions and configurations.
You want a framework that requires nearly zero configuration.
You want a framework that does not require you to use the command line.
You want a framework that does not require you to adhere to restrictive coding rules.
You are not interested in large-scale monolithic libraries like PEAR.
You do not want to be forced to learn a templating language (although a template parser is optionally available if you desire one).
You eschew complexity, favoring simple solutions.
You need clear, thorough documentation.





CodeIgniter is an Application Framework
CodeIgniter is a toolkit for people who build web applications using PHP. Its goal is to enable you to develop projects much faster than
 you could if you were writing code from scratch, by providing a rich set of libraries for commonly needed tasks, 
 
 
 as well as a simple interface and logical structure to access these libraries.
 CodeIgniter lets you creatively focus on your project by minimizing the amount of code needed for a given task


 CodeIgniter is Free


 CodeIgniter is Fast
Really fast. We challenge you to find a framework that has better performance than CodeIgniter.




CodeIgniter Uses M-V-C
CodeIgniter uses the Model-View-Controller approach, which allows great separation between logic and presentation.
 This is particularly good for projects in which designers are working with your template files, 
as the code these files contain will be minimized. We describe MVC in more detail on its own page.




CodeIgniter Generates Clean URLs
The URLs generated by CodeIgniter are clean and search-engine friendly. Rather than using the standard “query string” approach to URLs that is synonymous with dynamic systems, CodeIgniter uses a segment-based approach:

example.com/news/article/345



note:By default the index.php file is included in the URL but it can be removed using a simple .htaccess file.




CodeIgniter Packs a Punch
CodeIgniter comes with full-range of libraries that enable the most commonly needed web development tasks, like accessing a database,
 sending email, validating form data, maintaining sessions, manipulating images, working with XML-RPC data and much more.



 CodeIgniter is Extensible
The system can be easily extended through the use of your own libraries, helpers, or through class extensions or system hooks.




CodeIgniter Does Not Require a Template Engine
Although CodeIgniter does come with a simple template parser that can be optionally used, it does not force you to use one. 
Template engines simply can not match the performance of native PHP, and the syntax that 
must be learned to use a template engine is usually only marginally easier than learning the basics of PHP. Consider this block of PHP code:



<ul>

<?php foreach ($addressbook as $name) : ?>

<li><?=$name ?></li>

<?php endforeach; ?>

</ul>




Contrast this with the pseudo-code used by a template engine:

<ul>
{foreach from=$addressbook item="name"}
        <li>{$name}</li>
{/foreach}
</ul>



Yes, the template engine example is a bit cleaner, but it comes at the price of performance,
 as the pseudo-code must be converted back into PHP to run. 
Since one of our goals is maximum performance, we opted to not require the use of a template engine.





CodeIgniter Features
Features in and of themselves are a very poor way to judge an application since they tell you nothing about the user experience, or how intuitively or intelligently it is designed. Features don’t reveal anything about the quality of the code, or the performance, or the attention to detail, or security practices. The only way to really judge an app is to try it and get to know the code. Installing CodeIgniter is child’s play so we encourage you to do just that. In the mean time here’s a list of CodeIgniter’s main features.

Model-View-Controller Based System
Extremely Light Weight
Full Featured database classes with support for several platforms.
Query Builder Database Support
Form and Data Validation
Security and XSS Filtering
Session Management
Email Sending Class. Supports Attachments, HTML/Text email, multiple protocols (sendmail, SMTP, and Mail) and more.
Image Manipulation Library (cropping, resizing, rotating, etc.). Supports GD, ImageMagick, and NetPBM
File Uploading Class
FTP Class
Localization
Pagination
Data Encryption
Benchmarking
Full Page Caching
Error Logging
Application Profiling
Calendaring Class
User Agent Class
Zip Encoding Class
Template Engine Class
Trackback Class
XML-RPC Library
Unit Testing Class
Search-engine Friendly URLs
Flexible URI Routing
Support for Hooks and Class Extensions
Large library of “helper” functions




Application flow charts : 

The index.php serves as the front controller, initializing the base resources needed to run CodeIgniter.
The Router examines the HTTP request to determine what should be done with it.
If a cache file exists, it is sent directly to the browser, bypassing the normal system execution.
Security. Before the application controller is loaded, the HTTP request and any user submitted data is filtered for security.
The Controller loads the model, core libraries, helpers, and any other resources needed to process the specific request.
The finalized View is rendered then sent to the web browser to be seen. If caching is enabled, the view is cached first so that on subsequent requests it can be served.







Model-View-Controller
CodeIgniter is based on the Model-View-Controller development pattern. MVC is a software approach that separates application logic from presentation. In practice, it permits your web pages to contain minimal scripting since the presentation is separate from the PHP scripting.

The Model represents your data structures. Typically your model classes will contain functions that help you retrieve, insert, and update information in your database.
The View is the information that is being presented to a user. A View will normally be a web page, but in CodeIgniter, a view can also be a page fragment like a header or footer. It can also be an RSS page, or any other type of “page”.
The Controller serves as an intermediary between the Model, the View, and any other resources needed to process the HTTP request and generate a web page.
CodeIgniter has a fairly loose approach to MVC since Models are not required. If you don’t need the added separation, or find that maintaining models requires more complexity than you want, you can ignore them and build your application minimally using Controllers and Views. CodeIgniter also enables you to incorporate your own existing scripts, or even develop core libraries for the system, enabling you to work in a way that makes the most sense to you.







Design and Architectural Goals
Our goal for CodeIgniter is maximum performance, capability, and flexibility in the smallest, lightest possible package.

To meet this goal we are committed to benchmarking, re-factoring, and simplifying at every step of the development process, rejecting anything that doesn’t further the stated objective.

From a technical and architectural standpoint, CodeIgniter was created with the following objectives:

Dynamic Instantiation. In CodeIgniter, components are loaded and routines executed only when requested, rather than globally. No assumptions are made by the system regarding what may be needed beyond the minimal core resources, so the system is very light-weight by default. The events, as triggered by the HTTP request, and the controllers and views you design will determine what is invoked.
Loose Coupling. Coupling is the degree to which components of a system rely on each other. The less components depend on each other the more reusable and flexible the system becomes. Our goal was a very loosely coupled system.
Component Singularity. Singularity is the degree to which components have a narrowly focused purpose. In CodeIgniter, each class and its functions are highly autonomous in order to allow maximum usefulness.
CodeIgniter is a dynamically instantiated, loosely coupled system with high component singularity. It strives for simplicity, flexibility, and high performance in a small footprint package





Tutorial
This tutorial is intended to introduce you to the CodeIgniter framework and the basic principles of MVC architecture. It will show you how a basic CodeIgniter application is constructed in step-by-step fashion.

In this tutorial, you will be creating a basic news application. You will begin by writing the code that can load static pages. Next, you will create a news section that reads news items from a database. Finally, you’ll add a form to create news items in the database.

This tutorial will primarily focus on:

Model-View-Controller basics
Routing basics
Form validation
Performing basic database queries using “Query Builder”
The entire tutorial is split up over several pages, each explaining a small part of the functionality of the CodeIgniter framework. You’ll go through the following pages:

Introduction, this page, which gives you an overview of what to expect.
Static pages, which will teach you the basics of controllers, views and routing.
News section, where you’ll start using models and will be doing some basic database operations.
Create news items, which will introduce more advanced database operations and form validation.
Conclusion, which will give you some pointers on further reading and other resources.
Enjoy your exploration of the CodeIgniter framework.